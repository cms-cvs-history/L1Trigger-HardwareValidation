# CSC Trigger

### emulator

include "L1TriggerConfig/L1CSCTPConfigProducers/data/L1CSCTriggerPrimitivesConfig.cff"
include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
include "Geometry/MuonNumbering/data/muonNumberingInitialization.cfi"
include "Geometry/CSCGeometry/data/cscGeometry.cfi"
include "L1Trigger/CSCCommonTrigger/data/CSCCommonTrigger.cfi"

include "L1Trigger/CSCTriggerPrimitives/data/l1CscTpgEmulDigis.cfi"
replace l1CscTpgEmulDigis.CSCComparatorDigiProducer 
= muonCSCDigis:MuonCSCComparatorDigi
replace l1CscTpgEmulDigis.CSCWireDigiProducer       
= muonCSCDigis:MuonCSCWireDigi

include "L1Trigger/CSCTrackFinder/data/l1CscTfEmulDigis.cfi"
replace l1CscTfEmulDigis.CSCTrackProducer = csctfunpacker //l1CscTfTrackEmulDigis

include "L1Trigger/CSCTrackFinder/data/l1CscTfTrackEmulDigis.cfi"
replace l1CscTfTrackEmulDigis.SectorReceiverInput = csctfunpacker::demon

### unpacking

include "EventFilter/CSCRawToDigi/data/cscUnpacker.cfi"
replace muonCSCDigis.InputObjects = source
replace muonCSCDigis.UnpackStatusDigis = false

include "EventFilter/CSCTFRawToDigi/data/csctfunpacker.cfi"
replace csctfunpacker.producer  = source

// required by CSCDCCUnpacker/muonCSCDigis
es_source cscConditions = PoolDBESSource {
    string timetype = "runnumber"
    string connect = "frontier://(serverurl=http://frontier1.cms:8000/FrontierOn)(serverurl=http://frontier2.cms:8000/FrontierOn)(retrieve-ziplevel=0)/CMS_COND_ON_170_CSC"
    PSet DBParameters = {
	untracked int32 messageLevel = 0
	
    }
    VPSet toGet = {
	{ string record = "CSCDBGainsRcd"
	    string tag = "CSCDBGains_ideal" },
	{ string record = "CSCDBCrosstalkRcd"
	    string tag = "CSCDBCrosstalk_ideal" },
	{ string record = "CSCDBNoiseMatrixRcd"
	    string tag = "CSCDBNoiseMatrix_ideal" },
	{ string record = "CSCDBPedestalsRcd"
	    string tag = "CSCDBPedestals_ideal" },
	{ string record = "CSCChamberIndexRcd"
	    string tag = "CSCChamberIndex" },
	{ string record = "CSCChamberMapRcd"
	    string tag = "CSCChamberMap" },
	{ string record = "CSCCrateMapRcd"
	    string tag = "CSCCrateMap" },
	{ string record = "CSCDDUMapRcd"
	    string tag = "CSCDDUMap" }
    }
    untracked bool siteLocalConfig = false
}

/*
NOTES

CTP:
module muonCSCDigis   = CSCDCCUnpacker 
produces<CSCWireDigiCollection>("MuonCSCWireDigi");
produces<CSCStripDigiCollection>("MuonCSCStripDigi");
produces<CSCComparatorDigiCollection>("MuonCSCComparatorDigi");
produces<CSCALCTDigiCollection>("MuonCSCALCTDigi");
produces<CSCCLCTDigiCollection>("MuonCSCCLCTDigi");
produces<CSCRPCDigiCollection>("MuonCSCRPCDigi");
produces<CSCCorrelatedLCTDigiCollection>("MuonCSCCorrelatedLCTDigi");
if(unpackStatusDigis): 
produces<CSCCFEBStatusDigiCollection>("MuonCSCCFEBStatusDigi");
produces<CSCTMBStatusDigiCollection>("MuonCSCTMBStatusDigi");
produces<CSCDMBStatusDigiCollection>("MuonCSCDMBStatusDigi");
produces<CSCALCTStatusDigiCollection>("MuonCSCALCTStatusDigi");
produces<CSCDDUStatusDigiCollection>("MuonCSCDDUStatusDigi");
produces<CSCDCCStatusDigiCollection>("MuonCSCDCCStatusDigi");

CTF:
module csctfunpacker = CSCTFUnpacker
produces<CSCCorrelatedLCTDigiCollection>();
produces<L1CSCTrackCollection>();
produces<L1CSCStatusDigiCollection>();

CTP:

module l1CscTpgEmulDigis = CSCTriggerPrimitivesProducer
produces<CSCALCTDigiCollection>();
produces<CSCCLCTDigiCollection>();
produces<CSCCorrelatedLCTDigiCollection>();
produces<CSCCorrelatedLCTDigiCollection>("MPCSORTED");
edm::Handle<CSCComparatorDigiCollection> compDigis;
edm::Handle<CSCWireDigiCollection>       wireDigis;
ev.getByLabel(compDigiProducer_.label(), compDigiProducer_.instance(), compDigis);
ev.getByLabel(wireDigiProducer_.label(), wireDigiProducer_.instance(), wireDigis);

CTF:

module l1CscTfTrackEmulDigis = CSCTFTrackProducer
produces<L1CSCTrackCollection>();
produces<CSCTriggerContainer<csctf::TrackStub> >();
L1Trigger/CSCTrackFinder/plugins/CSCTFTrackProducer.cc
edm::Handle<CSCCorrelatedLCTDigiCollection> LCTs;
edm::Handle<L1MuDTChambPhContainer> dttrig;
e.getByLabel(input_module.label(),input_module.instance(), LCTs);
e.getByType(dttrig);

module l1CscTfEmulDigis = CSCTFCandidateProducer
produces<std::vector<L1MuRegionalCand> >("CSC");
edm::Handle<L1CSCTrackCollection> tracks;
e.getByLabel(input_module.label(),input_module.instance(), tracks);

*/
